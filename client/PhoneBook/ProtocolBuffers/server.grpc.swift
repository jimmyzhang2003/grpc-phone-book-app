//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: server.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Com_Example_Grpc_ContactServiceClient`, then call methods of this protocol to make API calls.
internal protocol Com_Example_Grpc_ContactServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Com_Example_Grpc_ContactServiceClientInterceptorFactoryProtocol? { get }

  func addContact(
    _ request: Com_Example_Grpc_ContactInfo,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Example_Grpc_ContactInfo, Com_Example_Grpc_ContactId>

  func updateContact(
    _ request: Com_Example_Grpc_ContactInfoWithId,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Example_Grpc_ContactInfoWithId, Com_Example_Grpc_Empty>

  func deleteContact(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Example_Grpc_ContactId, Com_Example_Grpc_Empty>

  func clearContacts(
    _ request: Com_Example_Grpc_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Example_Grpc_Empty, Com_Example_Grpc_Empty>

  func getContact(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Example_Grpc_ContactId, Com_Example_Grpc_ContactInfo>

  func getContactsList(
    _ request: Com_Example_Grpc_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Example_Grpc_Empty, Com_Example_Grpc_ContactsList>

  func getGroceryListForContact(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions?,
    handler: @escaping (Com_Example_Grpc_GroceryItem) -> Void
  ) -> ServerStreamingCall<Com_Example_Grpc_ContactId, Com_Example_Grpc_GroceryItem>
}

extension Com_Example_Grpc_ContactServiceClientProtocol {
  internal var serviceName: String {
    return "com.example.grpc.ContactService"
  }

  /// Unary call to AddContact
  ///
  /// - Parameters:
  ///   - request: Request to send to AddContact.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addContact(
    _ request: Com_Example_Grpc_ContactInfo,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Example_Grpc_ContactInfo, Com_Example_Grpc_ContactId> {
    return self.makeUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.addContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddContactInterceptors() ?? []
    )
  }

  /// Unary call to UpdateContact
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateContact.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateContact(
    _ request: Com_Example_Grpc_ContactInfoWithId,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Example_Grpc_ContactInfoWithId, Com_Example_Grpc_Empty> {
    return self.makeUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.updateContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateContactInterceptors() ?? []
    )
  }

  /// Unary call to DeleteContact
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteContact.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteContact(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Example_Grpc_ContactId, Com_Example_Grpc_Empty> {
    return self.makeUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.deleteContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteContactInterceptors() ?? []
    )
  }

  /// Unary call to ClearContacts
  ///
  /// - Parameters:
  ///   - request: Request to send to ClearContacts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func clearContacts(
    _ request: Com_Example_Grpc_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Example_Grpc_Empty, Com_Example_Grpc_Empty> {
    return self.makeUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.clearContacts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClearContactsInterceptors() ?? []
    )
  }

  /// Unary call to GetContact
  ///
  /// - Parameters:
  ///   - request: Request to send to GetContact.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getContact(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Example_Grpc_ContactId, Com_Example_Grpc_ContactInfo> {
    return self.makeUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.getContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetContactInterceptors() ?? []
    )
  }

  /// Unary call to GetContactsList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetContactsList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getContactsList(
    _ request: Com_Example_Grpc_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Example_Grpc_Empty, Com_Example_Grpc_ContactsList> {
    return self.makeUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.getContactsList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetContactsListInterceptors() ?? []
    )
  }

  /// Server streaming call to GetGroceryListForContact
  ///
  /// - Parameters:
  ///   - request: Request to send to GetGroceryListForContact.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getGroceryListForContact(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions? = nil,
    handler: @escaping (Com_Example_Grpc_GroceryItem) -> Void
  ) -> ServerStreamingCall<Com_Example_Grpc_ContactId, Com_Example_Grpc_GroceryItem> {
    return self.makeServerStreamingCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.getGroceryListForContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGroceryListForContactInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Com_Example_Grpc_ContactServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Com_Example_Grpc_ContactServiceNIOClient")
internal final class Com_Example_Grpc_ContactServiceClient: Com_Example_Grpc_ContactServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Com_Example_Grpc_ContactServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Com_Example_Grpc_ContactServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the com.example.grpc.ContactService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Example_Grpc_ContactServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Com_Example_Grpc_ContactServiceNIOClient: Com_Example_Grpc_ContactServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Com_Example_Grpc_ContactServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the com.example.grpc.ContactService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Example_Grpc_ContactServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Com_Example_Grpc_ContactServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Com_Example_Grpc_ContactServiceClientInterceptorFactoryProtocol? { get }

  func makeAddContactCall(
    _ request: Com_Example_Grpc_ContactInfo,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Com_Example_Grpc_ContactInfo, Com_Example_Grpc_ContactId>

  func makeUpdateContactCall(
    _ request: Com_Example_Grpc_ContactInfoWithId,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Com_Example_Grpc_ContactInfoWithId, Com_Example_Grpc_Empty>

  func makeDeleteContactCall(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Com_Example_Grpc_ContactId, Com_Example_Grpc_Empty>

  func makeClearContactsCall(
    _ request: Com_Example_Grpc_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Com_Example_Grpc_Empty, Com_Example_Grpc_Empty>

  func makeGetContactCall(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Com_Example_Grpc_ContactId, Com_Example_Grpc_ContactInfo>

  func makeGetContactsListCall(
    _ request: Com_Example_Grpc_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Com_Example_Grpc_Empty, Com_Example_Grpc_ContactsList>

  func makeGetGroceryListForContactCall(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Com_Example_Grpc_ContactId, Com_Example_Grpc_GroceryItem>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Example_Grpc_ContactServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Com_Example_Grpc_ContactServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Com_Example_Grpc_ContactServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAddContactCall(
    _ request: Com_Example_Grpc_ContactInfo,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Com_Example_Grpc_ContactInfo, Com_Example_Grpc_ContactId> {
    return self.makeAsyncUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.addContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddContactInterceptors() ?? []
    )
  }

  internal func makeUpdateContactCall(
    _ request: Com_Example_Grpc_ContactInfoWithId,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Com_Example_Grpc_ContactInfoWithId, Com_Example_Grpc_Empty> {
    return self.makeAsyncUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.updateContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateContactInterceptors() ?? []
    )
  }

  internal func makeDeleteContactCall(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Com_Example_Grpc_ContactId, Com_Example_Grpc_Empty> {
    return self.makeAsyncUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.deleteContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteContactInterceptors() ?? []
    )
  }

  internal func makeClearContactsCall(
    _ request: Com_Example_Grpc_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Com_Example_Grpc_Empty, Com_Example_Grpc_Empty> {
    return self.makeAsyncUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.clearContacts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClearContactsInterceptors() ?? []
    )
  }

  internal func makeGetContactCall(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Com_Example_Grpc_ContactId, Com_Example_Grpc_ContactInfo> {
    return self.makeAsyncUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.getContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetContactInterceptors() ?? []
    )
  }

  internal func makeGetContactsListCall(
    _ request: Com_Example_Grpc_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Com_Example_Grpc_Empty, Com_Example_Grpc_ContactsList> {
    return self.makeAsyncUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.getContactsList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetContactsListInterceptors() ?? []
    )
  }

  internal func makeGetGroceryListForContactCall(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Com_Example_Grpc_ContactId, Com_Example_Grpc_GroceryItem> {
    return self.makeAsyncServerStreamingCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.getGroceryListForContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGroceryListForContactInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Example_Grpc_ContactServiceAsyncClientProtocol {
  internal func addContact(
    _ request: Com_Example_Grpc_ContactInfo,
    callOptions: CallOptions? = nil
  ) async throws -> Com_Example_Grpc_ContactId {
    return try await self.performAsyncUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.addContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddContactInterceptors() ?? []
    )
  }

  internal func updateContact(
    _ request: Com_Example_Grpc_ContactInfoWithId,
    callOptions: CallOptions? = nil
  ) async throws -> Com_Example_Grpc_Empty {
    return try await self.performAsyncUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.updateContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateContactInterceptors() ?? []
    )
  }

  internal func deleteContact(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions? = nil
  ) async throws -> Com_Example_Grpc_Empty {
    return try await self.performAsyncUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.deleteContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteContactInterceptors() ?? []
    )
  }

  internal func clearContacts(
    _ request: Com_Example_Grpc_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Com_Example_Grpc_Empty {
    return try await self.performAsyncUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.clearContacts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClearContactsInterceptors() ?? []
    )
  }

  internal func getContact(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions? = nil
  ) async throws -> Com_Example_Grpc_ContactInfo {
    return try await self.performAsyncUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.getContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetContactInterceptors() ?? []
    )
  }

  internal func getContactsList(
    _ request: Com_Example_Grpc_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Com_Example_Grpc_ContactsList {
    return try await self.performAsyncUnaryCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.getContactsList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetContactsListInterceptors() ?? []
    )
  }

  internal func getGroceryListForContact(
    _ request: Com_Example_Grpc_ContactId,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Com_Example_Grpc_GroceryItem> {
    return self.performAsyncServerStreamingCall(
      path: Com_Example_Grpc_ContactServiceClientMetadata.Methods.getGroceryListForContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGroceryListForContactInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Com_Example_Grpc_ContactServiceAsyncClient: Com_Example_Grpc_ContactServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Com_Example_Grpc_ContactServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Example_Grpc_ContactServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Com_Example_Grpc_ContactServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'addContact'.
  func makeAddContactInterceptors() -> [ClientInterceptor<Com_Example_Grpc_ContactInfo, Com_Example_Grpc_ContactId>]

  /// - Returns: Interceptors to use when invoking 'updateContact'.
  func makeUpdateContactInterceptors() -> [ClientInterceptor<Com_Example_Grpc_ContactInfoWithId, Com_Example_Grpc_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteContact'.
  func makeDeleteContactInterceptors() -> [ClientInterceptor<Com_Example_Grpc_ContactId, Com_Example_Grpc_Empty>]

  /// - Returns: Interceptors to use when invoking 'clearContacts'.
  func makeClearContactsInterceptors() -> [ClientInterceptor<Com_Example_Grpc_Empty, Com_Example_Grpc_Empty>]

  /// - Returns: Interceptors to use when invoking 'getContact'.
  func makeGetContactInterceptors() -> [ClientInterceptor<Com_Example_Grpc_ContactId, Com_Example_Grpc_ContactInfo>]

  /// - Returns: Interceptors to use when invoking 'getContactsList'.
  func makeGetContactsListInterceptors() -> [ClientInterceptor<Com_Example_Grpc_Empty, Com_Example_Grpc_ContactsList>]

  /// - Returns: Interceptors to use when invoking 'getGroceryListForContact'.
  func makeGetGroceryListForContactInterceptors() -> [ClientInterceptor<Com_Example_Grpc_ContactId, Com_Example_Grpc_GroceryItem>]
}

internal enum Com_Example_Grpc_ContactServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ContactService",
    fullName: "com.example.grpc.ContactService",
    methods: [
      Com_Example_Grpc_ContactServiceClientMetadata.Methods.addContact,
      Com_Example_Grpc_ContactServiceClientMetadata.Methods.updateContact,
      Com_Example_Grpc_ContactServiceClientMetadata.Methods.deleteContact,
      Com_Example_Grpc_ContactServiceClientMetadata.Methods.clearContacts,
      Com_Example_Grpc_ContactServiceClientMetadata.Methods.getContact,
      Com_Example_Grpc_ContactServiceClientMetadata.Methods.getContactsList,
      Com_Example_Grpc_ContactServiceClientMetadata.Methods.getGroceryListForContact,
    ]
  )

  internal enum Methods {
    internal static let addContact = GRPCMethodDescriptor(
      name: "AddContact",
      path: "/com.example.grpc.ContactService/AddContact",
      type: GRPCCallType.unary
    )

    internal static let updateContact = GRPCMethodDescriptor(
      name: "UpdateContact",
      path: "/com.example.grpc.ContactService/UpdateContact",
      type: GRPCCallType.unary
    )

    internal static let deleteContact = GRPCMethodDescriptor(
      name: "DeleteContact",
      path: "/com.example.grpc.ContactService/DeleteContact",
      type: GRPCCallType.unary
    )

    internal static let clearContacts = GRPCMethodDescriptor(
      name: "ClearContacts",
      path: "/com.example.grpc.ContactService/ClearContacts",
      type: GRPCCallType.unary
    )

    internal static let getContact = GRPCMethodDescriptor(
      name: "GetContact",
      path: "/com.example.grpc.ContactService/GetContact",
      type: GRPCCallType.unary
    )

    internal static let getContactsList = GRPCMethodDescriptor(
      name: "GetContactsList",
      path: "/com.example.grpc.ContactService/GetContactsList",
      type: GRPCCallType.unary
    )

    internal static let getGroceryListForContact = GRPCMethodDescriptor(
      name: "GetGroceryListForContact",
      path: "/com.example.grpc.ContactService/GetGroceryListForContact",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Com_Example_Grpc_ContactServiceProvider: CallHandlerProvider {
  var interceptors: Com_Example_Grpc_ContactServiceServerInterceptorFactoryProtocol? { get }

  func addContact(request: Com_Example_Grpc_ContactInfo, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Example_Grpc_ContactId>

  func updateContact(request: Com_Example_Grpc_ContactInfoWithId, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Example_Grpc_Empty>

  func deleteContact(request: Com_Example_Grpc_ContactId, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Example_Grpc_Empty>

  func clearContacts(request: Com_Example_Grpc_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Example_Grpc_Empty>

  func getContact(request: Com_Example_Grpc_ContactId, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Example_Grpc_ContactInfo>

  func getContactsList(request: Com_Example_Grpc_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Example_Grpc_ContactsList>

  func getGroceryListForContact(request: Com_Example_Grpc_ContactId, context: StreamingResponseCallContext<Com_Example_Grpc_GroceryItem>) -> EventLoopFuture<GRPCStatus>
}

extension Com_Example_Grpc_ContactServiceProvider {
  internal var serviceName: Substring {
    return Com_Example_Grpc_ContactServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddContact":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Example_Grpc_ContactInfo>(),
        responseSerializer: ProtobufSerializer<Com_Example_Grpc_ContactId>(),
        interceptors: self.interceptors?.makeAddContactInterceptors() ?? [],
        userFunction: self.addContact(request:context:)
      )

    case "UpdateContact":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Example_Grpc_ContactInfoWithId>(),
        responseSerializer: ProtobufSerializer<Com_Example_Grpc_Empty>(),
        interceptors: self.interceptors?.makeUpdateContactInterceptors() ?? [],
        userFunction: self.updateContact(request:context:)
      )

    case "DeleteContact":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Example_Grpc_ContactId>(),
        responseSerializer: ProtobufSerializer<Com_Example_Grpc_Empty>(),
        interceptors: self.interceptors?.makeDeleteContactInterceptors() ?? [],
        userFunction: self.deleteContact(request:context:)
      )

    case "ClearContacts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Example_Grpc_Empty>(),
        responseSerializer: ProtobufSerializer<Com_Example_Grpc_Empty>(),
        interceptors: self.interceptors?.makeClearContactsInterceptors() ?? [],
        userFunction: self.clearContacts(request:context:)
      )

    case "GetContact":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Example_Grpc_ContactId>(),
        responseSerializer: ProtobufSerializer<Com_Example_Grpc_ContactInfo>(),
        interceptors: self.interceptors?.makeGetContactInterceptors() ?? [],
        userFunction: self.getContact(request:context:)
      )

    case "GetContactsList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Example_Grpc_Empty>(),
        responseSerializer: ProtobufSerializer<Com_Example_Grpc_ContactsList>(),
        interceptors: self.interceptors?.makeGetContactsListInterceptors() ?? [],
        userFunction: self.getContactsList(request:context:)
      )

    case "GetGroceryListForContact":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Example_Grpc_ContactId>(),
        responseSerializer: ProtobufSerializer<Com_Example_Grpc_GroceryItem>(),
        interceptors: self.interceptors?.makeGetGroceryListForContactInterceptors() ?? [],
        userFunction: self.getGroceryListForContact(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Com_Example_Grpc_ContactServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Com_Example_Grpc_ContactServiceServerInterceptorFactoryProtocol? { get }

  func addContact(
    request: Com_Example_Grpc_ContactInfo,
    context: GRPCAsyncServerCallContext
  ) async throws -> Com_Example_Grpc_ContactId

  func updateContact(
    request: Com_Example_Grpc_ContactInfoWithId,
    context: GRPCAsyncServerCallContext
  ) async throws -> Com_Example_Grpc_Empty

  func deleteContact(
    request: Com_Example_Grpc_ContactId,
    context: GRPCAsyncServerCallContext
  ) async throws -> Com_Example_Grpc_Empty

  func clearContacts(
    request: Com_Example_Grpc_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Com_Example_Grpc_Empty

  func getContact(
    request: Com_Example_Grpc_ContactId,
    context: GRPCAsyncServerCallContext
  ) async throws -> Com_Example_Grpc_ContactInfo

  func getContactsList(
    request: Com_Example_Grpc_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Com_Example_Grpc_ContactsList

  func getGroceryListForContact(
    request: Com_Example_Grpc_ContactId,
    responseStream: GRPCAsyncResponseStreamWriter<Com_Example_Grpc_GroceryItem>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Example_Grpc_ContactServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Com_Example_Grpc_ContactServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Com_Example_Grpc_ContactServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Com_Example_Grpc_ContactServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddContact":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Example_Grpc_ContactInfo>(),
        responseSerializer: ProtobufSerializer<Com_Example_Grpc_ContactId>(),
        interceptors: self.interceptors?.makeAddContactInterceptors() ?? [],
        wrapping: { try await self.addContact(request: $0, context: $1) }
      )

    case "UpdateContact":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Example_Grpc_ContactInfoWithId>(),
        responseSerializer: ProtobufSerializer<Com_Example_Grpc_Empty>(),
        interceptors: self.interceptors?.makeUpdateContactInterceptors() ?? [],
        wrapping: { try await self.updateContact(request: $0, context: $1) }
      )

    case "DeleteContact":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Example_Grpc_ContactId>(),
        responseSerializer: ProtobufSerializer<Com_Example_Grpc_Empty>(),
        interceptors: self.interceptors?.makeDeleteContactInterceptors() ?? [],
        wrapping: { try await self.deleteContact(request: $0, context: $1) }
      )

    case "ClearContacts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Example_Grpc_Empty>(),
        responseSerializer: ProtobufSerializer<Com_Example_Grpc_Empty>(),
        interceptors: self.interceptors?.makeClearContactsInterceptors() ?? [],
        wrapping: { try await self.clearContacts(request: $0, context: $1) }
      )

    case "GetContact":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Example_Grpc_ContactId>(),
        responseSerializer: ProtobufSerializer<Com_Example_Grpc_ContactInfo>(),
        interceptors: self.interceptors?.makeGetContactInterceptors() ?? [],
        wrapping: { try await self.getContact(request: $0, context: $1) }
      )

    case "GetContactsList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Example_Grpc_Empty>(),
        responseSerializer: ProtobufSerializer<Com_Example_Grpc_ContactsList>(),
        interceptors: self.interceptors?.makeGetContactsListInterceptors() ?? [],
        wrapping: { try await self.getContactsList(request: $0, context: $1) }
      )

    case "GetGroceryListForContact":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Example_Grpc_ContactId>(),
        responseSerializer: ProtobufSerializer<Com_Example_Grpc_GroceryItem>(),
        interceptors: self.interceptors?.makeGetGroceryListForContactInterceptors() ?? [],
        wrapping: { try await self.getGroceryListForContact(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

internal protocol Com_Example_Grpc_ContactServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'addContact'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddContactInterceptors() -> [ServerInterceptor<Com_Example_Grpc_ContactInfo, Com_Example_Grpc_ContactId>]

  /// - Returns: Interceptors to use when handling 'updateContact'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateContactInterceptors() -> [ServerInterceptor<Com_Example_Grpc_ContactInfoWithId, Com_Example_Grpc_Empty>]

  /// - Returns: Interceptors to use when handling 'deleteContact'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteContactInterceptors() -> [ServerInterceptor<Com_Example_Grpc_ContactId, Com_Example_Grpc_Empty>]

  /// - Returns: Interceptors to use when handling 'clearContacts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClearContactsInterceptors() -> [ServerInterceptor<Com_Example_Grpc_Empty, Com_Example_Grpc_Empty>]

  /// - Returns: Interceptors to use when handling 'getContact'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetContactInterceptors() -> [ServerInterceptor<Com_Example_Grpc_ContactId, Com_Example_Grpc_ContactInfo>]

  /// - Returns: Interceptors to use when handling 'getContactsList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetContactsListInterceptors() -> [ServerInterceptor<Com_Example_Grpc_Empty, Com_Example_Grpc_ContactsList>]

  /// - Returns: Interceptors to use when handling 'getGroceryListForContact'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetGroceryListForContactInterceptors() -> [ServerInterceptor<Com_Example_Grpc_ContactId, Com_Example_Grpc_GroceryItem>]
}

internal enum Com_Example_Grpc_ContactServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ContactService",
    fullName: "com.example.grpc.ContactService",
    methods: [
      Com_Example_Grpc_ContactServiceServerMetadata.Methods.addContact,
      Com_Example_Grpc_ContactServiceServerMetadata.Methods.updateContact,
      Com_Example_Grpc_ContactServiceServerMetadata.Methods.deleteContact,
      Com_Example_Grpc_ContactServiceServerMetadata.Methods.clearContacts,
      Com_Example_Grpc_ContactServiceServerMetadata.Methods.getContact,
      Com_Example_Grpc_ContactServiceServerMetadata.Methods.getContactsList,
      Com_Example_Grpc_ContactServiceServerMetadata.Methods.getGroceryListForContact,
    ]
  )

  internal enum Methods {
    internal static let addContact = GRPCMethodDescriptor(
      name: "AddContact",
      path: "/com.example.grpc.ContactService/AddContact",
      type: GRPCCallType.unary
    )

    internal static let updateContact = GRPCMethodDescriptor(
      name: "UpdateContact",
      path: "/com.example.grpc.ContactService/UpdateContact",
      type: GRPCCallType.unary
    )

    internal static let deleteContact = GRPCMethodDescriptor(
      name: "DeleteContact",
      path: "/com.example.grpc.ContactService/DeleteContact",
      type: GRPCCallType.unary
    )

    internal static let clearContacts = GRPCMethodDescriptor(
      name: "ClearContacts",
      path: "/com.example.grpc.ContactService/ClearContacts",
      type: GRPCCallType.unary
    )

    internal static let getContact = GRPCMethodDescriptor(
      name: "GetContact",
      path: "/com.example.grpc.ContactService/GetContact",
      type: GRPCCallType.unary
    )

    internal static let getContactsList = GRPCMethodDescriptor(
      name: "GetContactsList",
      path: "/com.example.grpc.ContactService/GetContactsList",
      type: GRPCCallType.unary
    )

    internal static let getGroceryListForContact = GRPCMethodDescriptor(
      name: "GetGroceryListForContact",
      path: "/com.example.grpc.ContactService/GetGroceryListForContact",
      type: GRPCCallType.serverStreaming
    )
  }
}
